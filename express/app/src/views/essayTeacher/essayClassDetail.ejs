<link rel="stylesheet" href="/public/css/essayTeacher3File.css" />
<style>
  .status-pill {
    padding: 0.25rem 0.6rem;
    border-radius: 50px;
  }
</style>

<div class="container my-4">
  <!-- ==== THÔNG TIN VIDEO & LỚP ==== -->
  <h2 class="mb-4">Danh sách nộp bài</h2>

  <div id="infoCard" class="card mb-4 d-none">
    <div class="card-body row gy-2">
      <div class="col-md-6">
        <h5 class="card-title mb-1"><span id="videoName"></span></h5>
        <p class="mb-0 small text-muted">
          Môn <span id="EssaySubject"></span> • Khối <span id="EssayGrade"></span><br />
          Tạo ngày: <span id="EssayCreated"></span>
        </p>
      </div>
      <div class="col-md-6">
        <h5 class="card-title mb-1">Thông tin lớp</h5>
        <p class="mb-0 small text-muted">
          Tên lớp: <strong id="className"></strong><br />
          Năm học: <span id="classYear"></span><br />
          Khối: <span id="classGrade"></span> • Sĩ số: <span id="classSize"></span>
        </p>
      </div>
    </div>
  </div>

  <!-- spinner -->
  <div id="loading" class="text-center my-5">
    <div class="spinner-border text-primary" role="status"></div>
  </div>

  <!-- bảng kết quả -->
  <div class="table-responsive">
    <table id="resultTable" class="table table-striped align-middle d-none">
      <thead class="table-primary">
        <tr>
          <th>#</th>
          <th>Họ&nbsp;tên&nbsp;/&nbsp;Email</th>
          <th>Trạng&nbsp;thái</th>
          <th>Thời&nbsp;gian&nbsp;nộp</th>
          <th>Bài Nộp</th>
          <!-- NEW -->
          <th>Điểm</th>
          <th>Phản hồi</th>
          <!-- NEW -->
          <th>Gửi</th>
          <!-- NEW -->
        </tr>
      </thead>

      <tbody></tbody>
    </table>
  </div>

  <!-- khi không có dữ liệu -->
  <p id="emptyMsg" class="text-muted text-center d-none">Chưa có thông tin học sinh.</p>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    /* === Lấy classId & essayId từ URL === */
    const urlParams = new URLSearchParams(window.location.search);
    const CLASS_ID = urlParams.get('class_id');
    const ESSAY_ID = urlParams.get('essay-id');
    if (!CLASS_ID || !ESSAY_ID) {
      alert('Thiếu class_id hoặc essay-id trên URL');
      return;
    }

    const API = `/essay-teacher/api/essay-class-detail?class_id=${CLASS_ID}&essay-id=${ESSAY_ID}`;

    loadData(API);
  });

  /* ---- Hàm tải & render ---- */
  async function loadData(apiUrl) {
    const spinner = document.getElementById('loading');
    const table = document.getElementById('resultTable');
    const tbody = table.querySelector('tbody');
    const emptyMsg = document.getElementById('emptyMsg');

    try {
      const res = await fetch(apiUrl);
      if (!res.ok) throw new Error('Fetch failed');
      const { essaySubmitInfo = [], classInfo = {}, essayInfo = {} } = await res.json();
      const students = classInfo.students || [];

      /* ----- HIỂN THỊ THÔNG TIN TEST + CLASS ----- */
      document.getElementById('videoName').textContent = essayInfo.title;
      document.getElementById('EssaySubject').textContent = essayInfo.subject;
      document.getElementById('EssayGrade').textContent = essayInfo.grade;
      document.getElementById('EssayCreated').textContent = new Date(
        essayInfo.createdAt
      ).toLocaleString('vi-VN');

      document.getElementById('className').textContent = classInfo.class_name;
      document.getElementById('classYear').textContent = classInfo.school_year;
      document.getElementById('classGrade').textContent = classInfo.grade;
      document.getElementById('classSize').textContent = classInfo.number_student;
      infoCard.classList.remove('d-none');

      /* ---- Ghép hai mảng ---- */
      const merged = students.map((student) => {
        // tìm tất cả bài nộp của học sinh này
        const subs = essaySubmitInfo.filter(
          (essaySubmit) => essaySubmit.student_id === student.student_id
        );
        if (!subs.length) return { ...student, submit_status: false };

        // lấy bài nộp mới nhất (time_end lớn nhất)
        subs.sort((a, b) => new Date(b.time_end) - new Date(a.time_end));
        return {
          ...student,
          submit_status: true,
          submission: subs[0],
        };
      });

      /* ---- Hiển thị ---- */
      spinner.classList.add('d-none');
      if (!merged.length) {
        emptyMsg.classList.remove('d-none');
        return;
      }

      table.classList.remove('d-none');

      merged.forEach((student, idx) => {
        const user = student.student_user_id;
        const tr = document.createElement('tr');

        const statusHtml = student.submit_status
          ? `<span class="status-pill bg-success text-white">Đã nộp</span>`
          : `<span class="status-pill bg-secondary text-white">Chưa nộp</span>`;

        const score = student.submission?.score ?? '';
        const comments = student.submission?.comments ?? '';
        const essaySubmitId = student.submission?.grade; // ID cần để gửi chấm điểm
        const actionSubmit = student.submission
          ? `/essay-teacher/api/teacher-give-evaluate?essay-submit-id=${
              student.submission?._id ?? ''
            }`
          : '';
        const time = student.submit_status
          ? new Date(student.submission.createdAt).toLocaleString('vi-VN')
          : '-';
        const linkFile = student.submit_status ? student.submission.url_file_submit : false;

        // Gán unique ID cho input theo chỉ số
        const scoreInputId = `scoreInput-${idx}`;
        const commentsInputId = `commentsInput-${idx}`;

        tr.innerHTML = `
          <td>${idx + 1}</td>
          <td>
            ${user.fullname}<br>
            <small class="text-muted">${user.email}</small>
          </td>
          <td>${statusHtml}</td>
          <td>${time}</td>
          <td><a href="${linkFile}" target="_blank">${linkFile ? 'Link' : ''}</a></td>
          <td>
            <input id="${scoreInputId}" type="number" name="score" placeholder="${score}" required style="width: 60px;">
          </td>
          <td>
            <input id="${commentsInputId}" type="text" name="comments" placeholder="${comments}" required style="width: 300px;">
          </td>
          <td>
            <button class="btn btn-primary" ${
              !student.submit_status || student.submission.score ? 'disabled' : ''
            }>Gửi</button>
          </td>
        `;

        const submitBtn = tr.querySelector('button');

        // Nếu đã nộp → xử lý sự kiện gửi
        if (student.submit_status) {
          submitBtn.addEventListener('click', async () => {
            const scoreVal = document.getElementById(scoreInputId).value.trim();
            const commentsVal = document.getElementById(commentsInputId).value.trim();

            if (!scoreVal || isNaN(scoreVal) || scoreVal < 0 || scoreVal > 10) {
              alert('Điểm phải là số từ 0 đến 10');
              return;
            }
            if (!commentsVal) {
              alert('Vui lòng nhập nhận xét');
              return;
            }

            try {
              const res = await fetch(actionSubmit, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  score: Number(scoreVal),
                  comments: commentsVal,
                }),
              });

              if (!res.ok) throw new Error('Gửi đánh giá thất bại');

              alert('Đã gửi đánh giá thành công!');
              window.location.reload();
            } catch (err) {
              console.error(err);
              alert('Lỗi khi gửi đánh giá. Vui lòng thử lại.');
            }
          });
        } else {
          // Nếu chưa nộp → thông báo khi bấm nút
          submitBtn.addEventListener('click', () => {
            alert('Học sinh chưa nộp bài, không thể chấm điểm!');
          });
        }

        tbody.appendChild(tr);
      });
    } catch (err) {
      console.error(err);
      spinner.classList.add('d-none');
      emptyMsg.textContent = 'Không thể tải dữ liệu. Vui lòng thử lại.';
      emptyMsg.classList.remove('d-none');
    }
  }
</script>
