  <style>
    body {
      background-color: #f8f9fa;
    }
    .sidebar {
      background: white;
      border-right: 1px solid #ddd;
      height: 100vh;
      padding: 1rem;
    }
    .menu-item:hover {
      background-color: #f1f1f1;
      cursor: pointer;
    }
    .menu-item i {
      margin-right: 8px;
    }
    .user-card {
      background: #f1f1f1;
      padding: 10px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    .avatar {
      width: 40px;
      height: 40px;
      background: #ccc;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      margin-right: 10px;
    }
  </style>

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar is hear -->
    <div class="col-md-3 sidebar" id="sidebar-list">
    </div> 

    <!-- Content -->
    <div class="col-md-9 p-4">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h5>Danh s√°ch ƒë√£ thi (1/2)</h5>
        <button class="btn btn-primary btn-sm">Ch·ªçn nh√≥m l·ªõp: Kh√°c <span class="badge bg-light text-dark">1</span></button>
      </div>

      <ul class="nav nav-tabs">
        <li class="nav-item">
          <a class="nav-link active" href="#">L·ªõp h·ªçc t√≠nh th∆∞·ªùng (0)</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">T·ª± do (1/1)</a>
        </li>
      </ul>

      <div class="mt-3">
        <div class="user-card">
          <div class="avatar">A</div>
          <div>
            <strong>anphan</strong><br>
            <small class="text-muted">Ch∆∞a thi</small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- ‚úÖ Modal -->
<div class="modal fade" id="assignClassModal" tabindex="-1" aria-labelledby="assignClassLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="assignClassLabel">Giao b√†i ki·ªÉm tra cho l·ªõp</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>

      <div class="modal-body">
        <!-- Thanh c√¥ng c·ª• -->
        <div class="d-flex justify-content-between align-items-center mb-3 gap-2 flex-wrap">
          <button id="toggleSelectAll" class="btn btn-outline-secondary btn-sm">Ch·ªçn t·∫•t c·∫£ l·ªõp</button>

          <div class="input-group w-auto">
            <input id="searchClass" class="form-control form-control-sm" placeholder="T√¨m ki·∫øm l·ªõp">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
          </div>
        </div>

        <!-- Danh s√°ch l·ªõp -->
        <div class="table-responsive border rounded" style="max-height:55vh;overflow:auto;">
          <table class="table table-hover mb-0">
            <thead class="table-light">
              <tr>
                <th style="width:40px"></th>
                <th>T√™n l·ªõp</th>
                <th>Kh·ªëi</th>
                <th>Sƒ© s·ªë</th>
              </tr>
            </thead>
            <tbody id="classList"></tbody>
          </table>
        </div>
      </div>

      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
        <button id="saveAssign" class="btn btn-primary">L∆∞u</button>
      </div>
    </div>
  </div>
</div>

<script>
  const videoId = window.location.href.split('video-detail/')[1]

  let videoInformation = {}
  fetchVideodata()
    .then(data => {
      if (data) {
        videoInformation = data
        console.log('Video videoInformation:', videoInformation);
      } else {
        console.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin video');
      }
    })

  async function fetchVideodata() {
    if (!videoId) {
      console.error('Kh√¥ng t√¨m th·∫•y video ID trong URL');
      return;
    }
    try {
      const response = await fetch(`/video-teacher/api/video-detail/${videoId}`);
      if (!response.ok) throw new Error('L·ªói t·∫£i th√¥ng tin video');
      return await response.json();
    } catch (error) {
      console.error(error);
      alert('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin video. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
  
  const classListTbody = document.getElementById('classList');
  const searchInput    = document.getElementById('searchClass');
  const selectAllBtn   = document.getElementById('toggleSelectAll');
  const saveBtn        = document.getElementById('saveAssign');
  let classesData      = [];  // l∆∞u to√†n b·ªô l·ªõp
  let allSelected      = false;

  /** ‚õ≥ Fetch danh s√°ch l·ªõp khi m·ªü modal */
  document.getElementById('assignClassModal').addEventListener('show.bs.modal', fetchClasses);

  async function fetchClasses () {
    classListTbody.innerHTML = '<tr><td colspan="4" class="text-center py-4">ƒêang t·∫£i...</td></tr>';
    try {
      const res  = await fetch('/video-teacher/api/get-classes');
      const data = await res.json();
      classesData = data;
      renderClassRows(classesData);    
    } catch (err) {
      classListTbody.innerHTML = '<tr><td colspan="4" class="text-center text-danger py-4">L·ªói t·∫£i l·ªõp!</td></tr>';
      console.error(err);
    }
  }

  /** üé® Render b·∫£ng l·ªõp */
  function renderClassRows(list) {
    if (!list.length) {
      classListTbody.innerHTML = '<tr><td colspan="4" class="text-center py-4">Kh√¥ng c√≥ l·ªõp</td></tr>';
      return;
    }
    classListTbody.innerHTML = list.map(classItem => {
      const checked = videoInformation.class.includes(classItem._id) ? 'checked' : '';
      return `
        <tr>
          <td>
            <input type="checkbox" class="form-check-input class-check"
                   data-id="${classItem._id}" ${checked}>
          </td>
          <td>${classItem.class_name}</td>
          <td>${classItem.grade}</td>
          <td>${classItem.number_student}</td>
        </tr>`;
    }).join('');
  }

  /** üîç T√¨m ki·∫øm l·ªõp */
  searchInput.addEventListener('input', () => {
    const keyword = searchInput.value.trim().toLowerCase();
    const filtered = classesData.filter(c =>
      c.class_name.toLowerCase().includes(keyword)
    );
    renderClassRows(filtered);
  });

  /** üóπ Ch·ªçn / b·ªè ch·ªçn t·∫•t c·∫£ */
  selectAllBtn.addEventListener('click', () => {
    allSelected = !allSelected;
    document.querySelectorAll('.class-check').forEach(cb => cb.checked = allSelected);
    selectAllBtn.textContent = allSelected ? 'B·ªè ch·ªçn t·∫•t c·∫£' : 'Ch·ªçn t·∫•t c·∫£ l·ªõp';
  });

  /** üíæ Submit */
  saveBtn.addEventListener('click', async () => {
    const selectedIds = [...document.querySelectorAll('.class-check:checked')]
      .map(cb => cb.dataset.id);

    if (!selectedIds.length) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 l·ªõp!');
      return;
    }

    saveBtn.disabled = true;
    try {
      const res = await fetch(`/video-teacher/api/put-class-in-video`, {
        method : 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body   : JSON.stringify({ class_id: selectedIds, videoId:videoId })
      });
      if (!res.ok) throw new Error('L∆∞u th·∫•t b·∫°i');
      bootstrap.Modal.getInstance(
        document.getElementById('assignClassModal')
      ).hide();
      
      setTimeout(() => {
        alert('Giao b√†i th√†nh c√¥ng!');
        window.location.reload()
      }, 1000);

    } catch (err) {
      alert('C√≥ l·ªói khi l∆∞u!');
      console.error(err);
    } finally {
      saveBtn.disabled = false;
    }
  });
</script>

<script>
  async function deleteVideo(videoId) {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a video n√†y?')) {
      try {
        const response = await fetch(`/video-teacher/api/delete-video/${videoId}`, {
          method: 'DELETE'
        });
        if (!response.ok) throw new Error('Network response was not ok');
        alert('Video ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!');
        window.location.href = '/video-teacher';
      } catch (error) {
        console.error('Error deleting video:', error);
        alert('ƒê√£ x·∫£y ra l·ªói khi x√≥a video.');
      }
    }
  }

  async function fetchVideo() {
    try {
      // i want take video info from href window.location.href
      const videoId = window.location.href.split('video-detail/')[1]
      const response = await fetch(`/video-teacher/api/video-detail/${videoId}`);
      if (!response.ok) throw new Error('Network response was not ok');
      const videoInfo = await response.json();

      const sidebarList = document.getElementById('sidebar-list');
      if (!videoInfo) {
        console.error('No video data found');
        return;
      }
      sidebarList.innerHTML = `
        <h6 class="text-truncate"><i class="bi bi-file-earmark-text"></i>T√™n Video: ${videoInfo.video_requirement_name}</h6>
        <small class="text-muted">Ng√†y t·∫°o: ${new Date(videoInfo.createdAt).toLocaleDateString(
          'vi-VN', {
            year: 'numeric', month: '2-digit', day: '2-digit'
          }
        )}</small><br>
        <small class="text-muted">Ng∆∞·ªùi t·∫°o: ${videoInfo.teacher_owner_id.fullname}</small><br>
        <small class="text-muted">Th·ªùi gian video: ${videoInfo.video_duration}</small><br>
        <small class="text-muted">Kh·ªëi: ${videoInfo.grade}</small><br>
        <small class="text-muted">M√¥n: ${videoInfo.subject}</small><br>
        <button class="btn btn-outline-secondary btn-sm mt-2">üìé Copy link</button>

        <hr>
        <h6>Menu</h6>
        <div class="menu-item py-2">
          <a href="https://www.youtube.com/watch?v=${videoInfo.video_embed}" target="_blank" class="btn">
            <i class="fa-brands fa-youtube"></i>
            Xem video
          </a>
        </div>

        <div class="menu-item py-2"><i class="bi bi-bar-chart"></i> Th·ªëng k√™</div>
        <div onclick="deleteVideo('${videoInfo._id}')" class="menu-item py-2 text-danger"><i class="bi bi-trash"></i> X√≥a Video</div>

        <hr>
        <div class="d-flex justify-content-between align-items-center">
          <h6 class="mb-0">Giao cho l·ªõp</h6>
          <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignClassModal">
            S·ª≠a
          </button>
        </div>
      `

    } catch (error) {
      console.error('Error fetching video:', error);
    }
  }
  document.addEventListener('DOMContentLoaded', ()=>{
    fetchVideo();
  })
</script>